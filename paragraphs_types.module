<?php

/**
 * @file
 * Contains paragraphs_types.module..
 */

use Drupal\Core\Routing\RouteMatchInterface;
use \Drupal\file\Entity\File;
use \Drupal\image\Plugin\Field\FieldType\ImageItem;
use Drupal\image\Entity\ImageStyle;
use Drupal\Core\Render\Element;

/**
 * Implements hook_help().
 */
function paragraphs_types_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the paragraphs_types module.
    case 'help.page.paragraphs_types':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Paragraphs Types') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function paragraphs_types_theme() {
  return array(
    'paragraph__text' => array(
      'render element' => 'element',
      'template' => 'paragraph--text',
      'base hook' => 'paragraph',
    ),
    'paragraph__text_with_image' => array(
      'render element' => 'element',
      'template' => 'paragraph--text',
      'base hook' => 'paragraph',
    ),
    'paragraph__video' => array(
      'render element' => 'element',
      'template' => 'paragraph--text',
      'base hook' => 'paragraph',
    ),
    'paragraph__gallery' => array(
      'render element' => 'element',
      'template' => 'paragraph--text',
      'base hook' => 'paragraph',
    ),
    'paragraph__image' => array(
      'render element' => 'element',
      'template' => 'paragraph--text',
      'base hook' => 'paragraph',
    ),
    'paragraph__quote' => array(
      'render element' => 'element',
      'template' => 'paragraph--text',
      'base hook' => 'paragraph',
    )
  );
}


function paragraphs_types_page_attachments(array &$page) {
  $config = \Drupal::config('paragraphs_types.settings');

  if ($config->get('load_gallery_assets')) {
    $page['#attached']['library'][] = 'paragraphs_types/gallery';
    $page['#attached']['library'][] = 'paragraphs_types/photoswipe';
  }
}

function paragraphs_types_preprocess_paragraph__image_featured_text(&$variables) {
  $variables['image_text_layout'] = $variables['paragraph']->get('field_image_text_layout')->value;
}

function paragraphs_types_preprocess_paragraph__video(&$variables) {
  $videoUrl = $variables['elements']['field_url'][0]['#url']->getUri();
  $parsedUrl = parse_url($videoUrl);
  $videoHost = NULL;
  $videoID = NULL;

  // YOUTUBE
  if (strpos($parsedUrl['host'], 'youtube') !== FALSE) {
    $videoHost = 'youtube';
    parse_str($parsedUrl['query'], $query);
    if (array_key_exists('v', $query)) {
      $videoID = $query['v'];
    }
  }

  // VIMEO
  if (strpos($parsedUrl['host'], 'vimeo') !== FALSE) {
    $videoHost = 'vimeo';
    $videoID = substr(parse_url($videoUrl, PHP_URL_PATH), 1);
  }

  $variables['video_id'] = $videoID;
  $variables['video_host'] = $videoHost;
}

function paragraphs_types_preprocess_paragraph__gallery(&$variables) {
  $paragraph = $variables['paragraph'];
  $images = $paragraph->get('field_images');

  $variables['images'] = [];

  foreach ($images as $item) {

    $file = File::load($item->target_id);

    $image = [
      'url' => file_create_url($file->getFileUri()),
      'width' => $item->width,
      'height' => $item->height,
      'sizes' => _load_image_sizes($file)
    ];

    $variables['images'][] = $image;

  }
}

function paragraphs_types_preprocess_paragraph__image(&$variables) {
  $imageField = $variables['paragraph']->get('field_image')->first();
  $file = File::load($imageField->target_id);

  if (!$file) {
    return FALSE;
  }

  $caption = $variables['paragraph']->get('field_caption')->value;
  $variables['image'] = [
    'url' => file_create_url($file->getFileUri()),
    'width' => $imageField->width,
    'height' => $imageField->height,
    'caption' => $caption,
    'sizes' => _load_image_sizes($file)
  ];

}

function _load_image_sizes($image) {
  $fileUri = $image->getFileUri();
  $urls = [];
  foreach (ImageStyle::loadMultiple() as $image_style) {
    $urls[$image_style->getName()] = $image_style->buildUrl($fileUri);
  }
  return $urls;
}


function paragraphs_types_uninstall() {
  $files = [
    'paragraphs.paragraphs_type.text',
    'paragraphs.paragraphs_type.quote',
    'paragraphs.paragraphs_type.video',
    'paragraphs.paragraphs_type.image',
    'paragraphs.paragraphs_type.gallery',
    'paragraphs.paragraphs_type.text_with_image',

    'field.field.paragraph.text.field_text',
    'field.field.paragraph.quote.field_text_plain',
    'field.field.paragraph.video.field_url',
    'field.field.paragraph.quote.field_name',
    'field.field.paragraph.image.field_image',
    'field.field.paragraph.image.field_caption',
    'field.field.paragraph.gallery.field_images',
    'field.field.paragraph.gallery.field_gallery_headline',
    'field.field.paragraph.quote.field_quote_author',
    'field.field.paragraph.text_with_image.field_caption',
    'field.field.paragraph.text_with_image.field_image',
    'field.field.paragraph.text_with_image.field_text',
    'field.field.paragraph.text_with_image.field_text_with_image_layout',

    'field.storage.paragraph.field_quote_author',
    'field.storage.paragraph.field_images',
    'field.storage.paragraph.field_caption',
    'field.storage.paragraph.field_image',
    'field.storage.paragraph.field_name',
    'field.storage.paragraph.field_text_plain',
    'field.storage.paragraph.field_text',
    'field.storage.paragraph.field_url',
    'field.storage.paragraph.field_text_with_image_layout',
    'field.storage.paragraph.field_gallery_headline',

    'core.entity_view_display.paragraph.gallery.default',
    'core.entity_view_display.paragraph.image.default',
    'core.entity_view_display.paragraph.quote.default',
    'core.entity_view_display.paragraph.text_with_image.default',
    'core.entity_view_display.paragraph.text.default',
    'core.entity_view_display.paragraph.video.default',

    'core.entity_form_display.paragraph.gallery.default',
    'core.entity_form_display.paragraph.image.default',
    'core.entity_form_display.paragraph.quote.default',
    'core.entity_form_display.paragraph.text_with_image.default',
    'core.entity_form_display.paragraph.text.default',
    'core.entity_form_display.paragraph.video.default',

  ];
  foreach ($files as $file) {
    \Drupal::configFactory()->getEditable($file)->delete();
  }

}
